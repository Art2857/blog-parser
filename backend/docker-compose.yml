version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: blog_parser_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: blog_parser_prod
      POSTGRES_USER: blog_parser_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-blog_parser_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - blog_parser_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blog_parser_user -d blog_parser_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blog_parser_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: blog_parser_prod
      DB_USER: blog_parser_user
      DB_PASSWORD: ${DB_PASSWORD:-blog_parser_password}
      BLOG_URL: ${BLOG_URL:-https://is-systems.org/blog}
      REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-10000}
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - blog_parser_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: blog_parser_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - blog_parser_network
    depends_on:
      - backend
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local

networks:
  blog_parser_network:
    driver: bridge 